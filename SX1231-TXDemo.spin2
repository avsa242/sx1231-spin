{
    --------------------------------------------
    Filename: SX1231-TXDemo.spin2
    Author: Jesse Burt
    Description: Simple transmit demo of the sx1231 driver (P2 version)
    Copyright (c) 2020
    Started Nov 23, 2019
    Updated Jun 14, 2020
    See end of file for terms of use.
    --------------------------------------------
}
CON

    _xtlfreq        = cfg._xtlfreq
    _clkfreq        = cfg._clkfreq_def

' -- User-modifiable constants
    LED             = cfg.LED1
    SER_RX          = cfg.SER_RX
    SER_TX          = cfg.SER_TX
    SER_BAUD        = 2_000_000

    MISO_PIN        = 33
    MOSI_PIN        = 35
    SCK_PIN         = 34
    CS_PIN          = 32
    SCK_FREQ        = 1_000_000

    NODE_ADDRESS    = $02
' --

OBJ

    ser         : "com.serial.terminal.ansi"
    cfg         : "core.con.boardcfg.p2eval"
    io          : "io"
    time        : "time"
    int         : "string.integer"
    sx1231      : "wireless.transceiver.sx1231.spi.spin2"

VAR

    long _ser_cog, _sx1231_cog
    long _fifo[16]
    byte _pktlen

PUB Main()

    Setup()

'    sx1231.GPIO0 (sx1231.IO_HI_Z)                   ' Set SX1231 GPIO0 to Hi-Z mode
'    sx1231.AutoCal(sx1231.IDLE_RXTX)                ' Perform auto-calibration when transitioning from Idle to TX
    sx1231.Idle()
    sx1231.IntermediateMode(sx1231.IMODE_STBY)
    sx1231.EnterCondition(sx1231.EXITCOND_PKTSENT)
    sx1231.ExitCondition(sx1231.ENTCOND_FIFOLVL)
'    ser.printf("Waiting for radio idle status...")
'    repeat until sx1231.State == 1
'    ser.printf("done\n")

    sx1231.CarrierFreq(432_900_000)                 ' Set carrier frequency
    ser.printf("Carrier set to %d\n", sx1231.CarrierFreq())
'    ser.printf("Waiting for PLL lock...")
'    repeat until sx1231.PLLLocked == TRUE           ' Don't proceed until PLL is locked
'    ser.printf("done\n")

'    sx1231.TXPowerIndex(0)
    sx1231.TXPower(18)                               ' -18..17 (dBm)
    ser.printf("TXPower: %d dBm\n", sx1231.TXPower())

    ser.printf("Press any key to begin transmitting\n")
    ser.CharIn()

    Transmit()

    FlashLED(LED, 100)     ' Signal execution finished

PUB Transmit() | count, tmp, to_node

    _pktlen := 10
'    sx1231.NodeAddress(NODE_ADDRESS)                ' Set this node's address
    sx1231.PayloadLenCfg (sx1231.PKTLEN_FIXED)      ' Fixed payload length
    sx1231.PayloadLen (_pktlen)                     ' Set payload length to _pktlen
'    sx1231.CRCCheckEnabled (TRUE)                   ' Enable CRC checks on received payloads
'    sx1231.SyncMode (sx1231.SYNCMODE_3032_CS)       ' Accept payload as valid only if:
'    sx1231.AppendStatus (FALSE)                     '   At least 30 of 32 syncword bits match
                                                    '   Carrier sense is above set threshold
    to_node := $01

    ser.Clear()
    ser.Position(0, 0)
    ser.printf("Transmit mode - %dHz\n", sx1231.CarrierFreq())
    ser.printf("Transmitting to node $")
    ser.Hex(to_node, 2)

    _fifo.byte[0] := to_node                        ' Address of node we're sending to
    _fifo.byte[1] := NODE_ADDRESS                   ' This node's address
    _fifo.byte[2] := "T"                            ' Start of payload
    _fifo.byte[3] := "E"
    _fifo.byte[4] := "S"
    _fifo.byte[5] := "T"

    count := 0
    sx1231.FIFOThreshold(5)
    sx1231.TXStartCondition(sx1231.TXSTART_FIFOLVL)
    repeat
        tmp := int.DecZeroed(count++, 4)            ' Tack a counter onto the
        bytemove(@_fifo.byte[6], tmp, 4)            '   end of the payload
        ser.position(0, 10)
        ser.printf("Sending %s", @_fifo)
        sx1231.Idle()
        sx1231.FlushTX()
        sx1231.FSTX()
        sx1231.TXPayload (_pktlen, @_fifo)
        sx1231.TXMode()
        time.Sleep (1)                              ' Try not to abuse the airwaves - wait between transmissions

PUB Setup()

    repeat until _ser_cog := ser.StartRXTX (SER_RX, SER_TX, 0, SER_BAUD)
    ser.Clear()
    ser.PrintF("Serial terminal started\n")
    if _sx1231_cog := sx1231.Start (CS_PIN, SCK_PIN, MOSI_PIN, MISO_PIN, SCK_FREQ)
        sx1231.Defaults()
        ser.printf("SX1231 driver started\n")
    else
        ser.printf("SX1231 driver failed to start - halting\n")
        FlashLED (LED, 500)

DAT
' Radio states
MARC_STATE  byte    "SLEEP           ", 0 {0}
            byte    "IDLE            ", 0 {1}
            byte    "XOFF            ", 0 {2}
            byte    "VCOON_MC        ", 0 {3}
            byte    "REGON_MC        ", 0 {4}
            byte    "MANCAL          ", 0 {5}
            byte    "VCOON           ", 0 {6}
            byte    "REGON           ", 0 {7}
            byte    "STARTCAL        ", 0 {8}
            byte    "BWBOOST         ", 0 {9}
            byte    "FS_LOCK         ", 0 {10}
            byte    "IFADCON         ", 0 {11}
            byte    "ENDCAL          ", 0 {12}
            byte    "RX              ", 0 {13}
            byte    "RX_END          ", 0 {14}
            byte    "RX_RST          ", 0 {15}
            byte    "TXRX_SWITCH     ", 0 {16}
            byte    "RXFIFO_OVERFLOW ", 0 {17}
            byte    "FSTXON          ", 0 {18}
            byte    "TX              ", 0 {19}
            byte    "TX_END          ", 0 {20}
            byte    "RXRX_SWITCH     ", 0 {21}

#include "lib.utility.spin2"

DAT
{
    --------------------------------------------------------------------------------------------------------
    TERMS OF USE: MIT License

    Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
    associated documentation files (the "Software"), to deal in the Software without restriction, including
    without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the
    following conditions:

    The above copyright notice and this permission notice shall be included in all copies or substantial
    portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT
    LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
    IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
    WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
    SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
    --------------------------------------------------------------------------------------------------------
}

